/// Pseudocode to C transpiler

use std::fs;

const MAPPED_KEYWORDS: [&str; 8] = ["if ( ", "while ( ", ") {", "}", "&& ", "|| ", "= ", "} else {"];

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let mut output = String::new();
    let input = fs::read_to_string(&args[1]).unwrap();

    output.push_str(&format!("// Auto-generated by pcc from `{}`\r\n", &args[1]));
    output.push_str("#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <math.h>\r\n\r\n"); // Main headers
    output.push_str("int main() {\r\n");

    for line in input.split("\r\n") {
        output.push_str("    "); // From the main entry point

        let mut line = String::from(line);

        if !line.trim().is_empty() {
            let mut first = line.chars().nth(0).unwrap();
            while first == '\t' || first == ' ' {
                output.push(first);
                line.remove(0);

                if !line.is_empty() { first = line.chars().nth(0).unwrap(); }
            }

            line = String::from(line.trim_end());
            
            let words: Vec<&str> = line.split_whitespace().collect();
            
            // Note to self and others: words before "intreg", "real", "citeste", "scrie" are ignored, which is technically ok since they are supposed to be first in a line
            if let Some(i) = words.iter().position(|&word| word == "intreg" || word == "real") {
                if words[i] == "intreg" { output.push_str("int "); }
                else { output.push_str("double "); }
                
                output.push_str(&words[i + 1..].join(" "));
            }
            else if let Some(i) = words.iter().position(|&word| word == "citeste" || word == "scrie") {
                if words[i] == "citeste" { output.push_str("cin "); }
                else { output.push_str("cout "); }
                
                todo!("Not implemented yet");
            }
            else {
                for word in words {
                    let mut push = String::from(match word {
                        "daca" => "if ( ",
                        "altfel" => "} else {",
                        "cat-timp" => "while ( ",
                        "atunci" | "executa" => ") {",
                        "sfarsit" => "}",
                        "si" => "&& ",
                        "sau" => "|| ",
                        "<-" => "= ",
                        w => w
                    });

                    if !MAPPED_KEYWORDS.contains(&(&push as &str)) { push.push(' '); }

                    output.push_str(&push);
                };
            }
            
            if !output.trim_end().ends_with('}') && !output.trim_end().ends_with('{') {
                output = output.trim_end().to_string();
                output.push(';');
            }
        }
        else {
            let count: i32 = line.chars().map(|ch| if ch == ' ' { return 1; } else { return 0; }).sum();
            for _ in 0 .. count { output.push(' '); }
        }

        
        output.push_str("\r\n");
    }

    output.push_str("\r\n\treturn 0;\r\n");
    output.push('}');

    fs::write("./main.c", output).unwrap();

}