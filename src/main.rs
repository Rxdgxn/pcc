/// Pseudocode to C transpiler

use std::fs;

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let mut output = String::new();
    let input = fs::read_to_string(&args[1]).unwrap();

    output.push_str(&format!("// Auto-generated by pcc from `{}`\r\n", &args[1]));
    output.push_str("#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <math.h>\r\n\r\n"); // Main headers
    output.push_str("int main() {\r\n");

    for line in input.split("\r\n") {
        output.push('\t'); // From the main entry point

        let mut line = String::from(line);
        
        let mut first = line.chars().nth(0).unwrap();
        while first == '\t' || first == ' ' {
            output.push(first);
            line.remove(0);

            if !line.is_empty() { first = line.chars().nth(0).unwrap(); }
        }

        line = String::from(line.trim_end());
        
        let words: Vec<&str> = line.split_whitespace().collect();
        
        // Note to self and others: words before "intreg" or "real" are ignored, which is technically ok
        if let Some(i) = words.iter().position(|&word| word == "intreg" || word == "real") {
            if words[i] == "intreg" { output.push_str("int "); }
            else { output.push_str("double "); }
            
            output.push_str(&words[i + 1..].join(" "));
        }
        else {
            // TODO
        }
        
        output.push_str(";\r\n");
    }

    output.push_str("\r\n\treturn 0;\r\n");
    output.push('}');

    fs::write("./main.c", output).unwrap();

}